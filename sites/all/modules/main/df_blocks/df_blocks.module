<?php

/**
 * @file drupal 7.x module, learning blocks.
 */

/**
 * Implements hook_block_info().
 *
 * - Creates entry for your custom block in the drupal administration blocks list.
 * - It can be slightly configured and the tilte (info) is required.
 */
function df_blocks_block_info() {
  $blocks['node_train_list'] = array(
    'info' => t('Node train list'),
  );

  return $blocks;
}

/**
 * Implements hook_block_configure().
 *
 * Extends configuration for custimizing blocks.
 */
function df_blocks_block_configure($delta) {
  $form = array();

  switch ($delta) {
    case 'node_train_list':
      $form['ntl_availables'] = array(
          '#type' => 'checkboxes',
          '#title' => t('Select Content Types'),
          '#description' => t('Nodes of the content types selected will be shown in the block.'),
          '#options' => variable_get('node_type_form_variable', array()),
          '#default_value' => variable_get('block_ntl_ct_availables', array()),
          );
    break;
  }

  return $form;
}

/**
 * Implements hook_block_save().
 *
 * Persistency of the changes made in hook_block_configure().
 */
function df_blocks_block_save($delta = '', $edit = array()){
  switch ($delta) {
    case 'node_train_list':
      $data = array();
      $data = $edit['ntl_availables'];
      variable_set('block_ntl_ct_availables', $data);
    break;
  }
}

/**
 * Implements hook_block_view().
 *
 * Defining the output of our custom blocks.
 */
function df_blocks_block_view($delta = ''){

  $block = array();

  switch($delta){
    case 'node_train_list':
      $block['subject'] = t('Node train list block');
      $block['content'] = df_blocks_block_contents($delta);
      return $block;
    break;
  }
}

/**
 * A module-defined block content function
 *
 * Renders the content of the custom blocks.
 */
function df_blocks_block_contents($delta){

  switch($delta){
    case 'node_train_list':
        $header = array(
            array('data' => t('Node title')),
            array('data' => t('Content type')),
            );

        // Get the options selected in both the configuration of the content type and the block.
        $content_types_ntl = variable_get('node_type_form_variable', array());
        $content_types_availables = variable_get('block_ntl_ct_availables', array());
        // Calculate intersection of both sets to get those with both options selected.
        $intersection = array_intersect($content_types_availables, $content_types_ntl);

        // Get the nodes of the content types for the resulting intersection.
        $sql = "SELECT title, type FROM {node} WHERE type IN (:values)";
        $result = !empty($intersection) ? db_query($sql, array(':values' => $intersection)) : array();

        $rows = array();
        foreach ($result as $row) {
          $rows[] = array(
              array('data' => t($row->title)),
              array('data' => t($row->type)),
              );
        }
        return array('#markup' => theme('table', array('header' => $header, 'rows' => $rows,)));
    break;
  }
}
